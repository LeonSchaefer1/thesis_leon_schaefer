%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Alexander Becker at 2013-04-24 17:46:46 +0200 


%% Saved with string encoding Unicode (UTF-8) 



% This file was created with Citavi 6.10.0.0

% This file was created with Citavi 6.10.0.0

% This file was created with Citavi 6.10.0.0

% This file was created with Citavi 6.10.0.0

@proceedings{.2010,
	year = {2010},
	title = {2010 11th IEEE/ACM International Conference on Grid Computing},
	publisher = {IEEE}
}


% This file was created with Citavi 6.8.0.0

@proceedings{.2010,
	year = {2010},
	title = {2010 11th IEEE/ACM International Conference on Grid Computing},
	publisher = {IEEE}
}


@book{.2014,
	year = {2014},
	title = {Matchmaking in multi-player on-line games: studying user traces to improve the user experience},
	file = {https://dl.acm.org/doi/abs/10.1145/2578260.2578265},
	file = {3e0b78ce-a37b-4e7a-a51d-ecaf080a8270:C\:\\Users\\Leon Schäfer\\AppData\\Local\\Swiss Academic Software\\Citavi 6\\ProjectCache\\mtxra681in70jxpr858qasvvk4jchlxzb1qmh7hosh7l0wjibxm\\Citavi Attachments\\3e0b78ce-a37b-4e7a-a51d-ecaf080a8270.pdf:pdf}
}


@article{Deng.2018,
	author = {Deng, Yunhua and Li, Yusen and Seet, Ronald and Tang, Xueyan and Cai, Wentong},
	year = {2018},
	title = {The Server Allocation Problem for Session-Based Multiplayer Cloud Gaming},
	pages = {1233--1245},
	volume = {20},
	number = {5},
	issn = {1520-9210},
	journal = {IEEE Transactions on Multimedia},
	doi = {10.1109/tmm.2017.2760621}
}


@misc{gameVerbandderdeutschenGamesBranchee.V..2020,
	author = {{game - Verband der deutschen Games-Branche e.V.}},
	year = {2020},
	title = {Jahresreport der deutschen Games-Branche 2020},
	url = {https://www.game.de/wp-content/uploads/2020/08/game-Jahresreport-2020.pdf}
}


@misc{GitHyp.February2021,
	author = {GitHyp},
	year = {February 2021},
	title = {Most played games on Steam in 2020, by hourly average number of players},
	url = {https://www.statista.com/statistics/656319/steam-most-played-games-average-player-per-hour/}
}


@article{Glinka.2008,
	abstract = {Multiplayer online games with support for high user numbers must provide mechanisms to support an increasing amount of players by using additional resources. This paper provides a comprehensive analysis of the practically proven multiserver distribution mechanisms, zoning, instancing, and replication, and the tasks for the game developer implied by them. We propose a novel, high-level development approach which integrates the three distribution mechanisms seamlessly in today's online games. As a possible base for this high-level approach, we describe the real-time framework (RTF) middleware system which liberates the developer from low-level tasks and allows him to stay at high level of design abstraction. We explain how RTF supports the implementation of single-server online games and how RTF allows to incorporate the three multiserver distribution mechanisms during the development process. Finally, we describe briefly how RTF provides manageability and maintenance functionality for online games in a grid context with dynamic resource allocation scenarios.},
	author = {Glinka, Frank and Ploss, Alexander and Gorlatch, Sergei and M{\"u}ller-Iden, Jens},
	year = {2008},
	title = {High-Level Development of Multiserver Online Games},
	url = {https://www.hindawi.com/journals/ijcgt/2008/327387/},
	pages = {1--16},
	volume = {2008},
	issn = {1687-7047},
	journal = {International Journal of Computer Games Technology},
	doi = {10.1155/2008/327387},
	file = {Glinka, Ploss et al. 2008 - High-Level Development of Multiserver Online.pdf}
}


@misc{JeromeRenaux.2017,
	author = {{Jerome Renaux}},
	year = {2017},
	title = {Interest management for multiplayer online games},
	url = {https://www.dynetisgames.com/2017/04/05/interest-management-mog/},
	urldate = {06.01.2022}
}


@misc{JonathanBlow.01February2004,
	author = {{Jonathan Blow}},
	year = {01 February 2004},
	title = {Game Development: Harder Than You Think: Ten or twenty years ago it was all fun and games. Now it's blood, sweat, and code.},
	url = {https://dl.acm.org/doi/abs/10.1145/971564.971590#d53264194e1}
}


@misc{JoshAlman.2017,
	author = {{Josh Alman}},
	editor = {{Computer Science and Artificial Intelligence Laboratory, Massachusetts Institute of Technology}},
	year = {2017},
	title = {Theoretical Foundations of Team Matchmaking},
	url = {https://www.ifaamas.org/Proceedings/aamas2017/pdfs/p1073.pdf}
}


@misc{MFatihMAR.2021,
	author = {MFatihMAR},
	year = {2021},
	title = {Game Networking Resources},
	publisher = {GitHub},
	journal = {GitHub repository}
}


@inproceedings{Nae.2010,
	author = {Nae, Vlad and Prodan, Radu and Fahringer, Thomas},
	title = {Cost-efficient hosting and load balancing of Massively Multiplayer Online Games},
	publisher = {IEEE},
	booktitle = {2010 11th IEEE/ACM International Conference on Grid Computing},
	year = {2010},
	doi = {10.1109/grid.2010.5697956}
}


@article{Payne.18.09.2019,
	abstract = {In this article John Payne, one of our Technical Directors, explains some of the inner workings of how Crayta enables multiplayer game creation `out of the box'.},
	author = {Payne, John},
	year = {18.09.2019},
	title = {Making Multiplayer Games Doesn't Have to Be Difficult},
	url = {https://medium.com/crayta/making-multiplayer-games-doesnt-have-to-be-difficult-d08d19c83de3},
	urldate = {02.12.2021},
	journal = {Crayta},
	file = {Payne 18.09.2019 - Making Multiplayer Games Doesn’t Have.pdf}
}


@misc{SimonKucher&Partners.2020,
	author = {{Simon-Kucher {\&} Partners}},
	year = {2020},
	title = {Impact of COVID-19 on the frequency of playing multiplayer video games worldwide as of June 2020},
	url = {https://www.statista.com/statistics/1188549/covid-gaming-multiplayer/}
}


@article{Smed.2002,
	abstract = {Distributed, real--time multiplayer computer games (MCGs) are in the vanguard of utilizing the networking possibilities. Although related research has been done in military simulations, virtual reality systems, and computer supported cooperative working, the suggested solutions diverge from the problems posed by MCGs. With this in mind, this paper provides a concise overview of four aspects affecting networking in MCGs. First, networking resources (bandwidth, latency, and computational power) set the technical boundaries within which the MCG must operate. Second, distribution concepts encompass communication architectures (peer--to--peer, client/server, server--network), and both data and control architectures (centralized, distributed, replicated). Third, scalability allows the MCG to adapt to the resource changes by parametrization. Finally, security aims at fighting back against cheating and vandalism, which are common in online gaming.},
	author = {Smed, Jouni and Kaukoranta, Timo and Hakonen, Harri},
	year = {2002},
	title = {Aspects of networking in multiplayer computer games},
	url = {https://www.emerald.com/insight/content/doi/10.1108/02640470210424392/full/pdf},
	pages = {87--97},
	volume = {20},
	number = {2},
	journal = {The Electronic Library},
	doi = {10.1108/02640470210424392},
	file = {Smed, Kaukoranta et al. 2002 - Aspects of networking in multiplayer.pdf},
	file = {https://www.emerald.com/insight/content/doi/10.1108/02640470210424392/full/html}
}


@book{Smed.2002c,
	author = {Smed, Jouni and Kaukoranta, Timo and Hakonen, Harri},
	year = {2002},
	title = {A review on networking and multiplayer computer games},
	url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.2565&rep=rep1&type=pdf},
	publisher = {Citeseer},
	file = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.2565&rep=rep1&type=pdf}
}


@misc{Wikipedia.2019,
	abstract = {Die Serialisierung ist in der Informatik eine Abbildung von strukturierten Daten auf eine sequenzielle Darstellungsform. Serialisierung wird haupts{\"a}chlich f{\"u}r die Speicherung von Objekten in Dateien und f{\"u}r die {\"U}bertragung von Objekten {\"u}ber das Netzwerk bei verteilten Softwaresystemen verwendet.
	
	{\"U}bliche Speichermedien sind nur in der Lage, Datenstr{\"o}me zu speichern. Um Persistenz f{\"u}r ein Objekt zu erreichen, kann es serialisiert werden. Hier wird der komplette Zustand des Objektes, inklusive aller referenzierten Objekte, in einen Datenstrom umgewandelt, der anschlie{\ss}end auf ein Speichermedium geschrieben wird.
	
	Nach der Serialisierung liegt ein Objekt mehrfach vor: Als externe Darstellung (z. B. als Datei) und im Arbeitsspeicher. Wird nach der Serialisierung eine {\"A}nderung am Objekt im Arbeitsspeicher vorgenommen, hat dieses keine Auswirkung auf das serialisierte Objekt in der externen Darstellung.
	
	Die Umkehrung der Serialisierung, also die Umwandlung eines Datenstroms in Objekte, wird als Deserialisierung bezeichnet.},
	editor = {Wikipedia},
	year = {2019},
	title = {Serialisierung},
	url = {https://de.wikipedia.org/w/index.php?title=Serialisierung&oldid=190015284},
	urldate = {04.01.2022},
	file = {Wikipedia (Hg.) 2019 - Serialisierung.pdf}
}


@misc{Wikipedia.2021,
	abstract = {Als Echtzeitsysteme (englisch real-time systems) werden {\glqq}Systeme zur unmittelbaren Steuerung und Abwicklung von Prozessen{\grqq} bezeichnet, die daf{\"u}r an sie gestellte quantitative Echtzeitanforderungen erf{\"u}llen m{\"u}ssen. Diese kommen in diversen Technikgebieten zur Anwendung, etwa in der Prozessleittechnik, in Motorsteuerungen, in der Satellitensystemtechnik, in Signal- und Weichenstellanlagen, in der Robotik und in weiteren Bereichen.
	
	Oft besteht die Anforderung darin, dass ein Ergebnis innerhalb eines vorher fest definierten Zeitintervalls garantiert berechnet ist, also vor einer bestimmten Zeitschranke vorliegt. Die Gr{\"o}{\ss}e des Zeitintervalls spielt dabei keine Rolle: W{\"a}hrend bei einigen Aufgaben (z. B. in der Motorsteuerung) eine Sekunde bereits zu lang sein kann, reichen f{\"u}r andere Probleme Stunden oder sogar Tage. Ein Echtzeitsystem muss also nicht nur ein Mess- oder Berechnungsergebnis mit dem richtigen Wert, sondern dasselbe auch noch rechtzeitig liefern. Andernfalls hat das System versagt.
	
	In der Praxis l{\"a}sst sich eine beliebig kleine Zeitschranke mangels gen{\"u}gend schneller Hardware nicht immer realisieren. Daher spricht man auch von {\glqq}in Echtzeit{\grqq}, wenn Programme ohne sp{\"u}rbare Verz{\"o}gerung arbeiten. Diese Definition ist jedoch sehr unsauber. Grunds{\"a}tzlich falsch ist es, {\glqq}Echtzeitsystem{\grqq} als Synonym f{\"u}r {\glqq}besonders schnell{\grqq} anzusehen. Im Gegenteil, Echtzeitsysteme m{\"u}ssen entsprechende Leerl{\"a}ufe einplanen, um auch in besonders fordernden Situationen ihren Echtzeitanforderungen gerecht zu werden.},
	editor = {Wikipedia},
	year = {2021},
	title = {Echtzeitsystem},
	url = {https://de.wikipedia.org/w/index.php?title=Echtzeitsystem&oldid=217468472},
	urldate = {04.01.2022},
	file = {Wikipedia (Hg.) 2021 - Echtzeitsystem.pdf}
}


@misc{Wikipedia.2021b,
	abstract = {In multiplayer video games, matchmaking is the process of connecting players together for online play sessions.},
	editor = {Wikipedia},
	year = {2021},
	title = {Matchmaking (video games)},
	url = {https://en.wikipedia.org/w/index.php?title=Matchmaking_(video_games)&oldid=1056891415},
	urldate = {07.01.2022},
	file = {ee656ab7-3ef2-4423-b1f8-34a61aa4cc88:C\:\\Users\\Leon Schäfer\\AppData\\Local\\Swiss Academic Software\\Citavi 6\\ProjectCache\\mtxra681in70jxpr858qasvvk4jchlxzb1qmh7hosh7l0wjibxm\\Citavi Attachments\\ee656ab7-3ef2-4423-b1f8-34a61aa4cc88.pdf:pdf}
}


@misc{Wikipedia.2021c,
	abstract = {Single Sign-on (SSO, mitunter auch als {\glqq}Einmalanmeldung{\grqq} {\"u}bersetzt) bedeutet, dass ein Benutzer nach einer einmaligen Authentifizierung an einem Arbeitsplatz auf alle Rechner und Dienste, f{\"u}r die er lokal berechtigt (autorisiert) ist, vom selben Arbeitsplatz aus zugreifen kann, ohne sich an den einzelnen Diensten jedes Mal zus{\"a}tzlich anmelden zu m{\"u}ssen. Wechselt der Benutzer den Arbeitsplatz, wird die Authentifizierung, wie auch die lokale Autorisierung, hinf{\"a}llig.
	
	F{\"u}r den Anwender bringt diese M{\"o}glichkeit insbesondere bei Portalen gewisse Vorteile. Innerhalb von Portalen ist es auch m{\"o}glich, dass die Identit{\"a}t des angemeldeten Benutzers an die das Portal konstituierenden Schichten weitervererbt wird, ohne dass dies der Sicht des Anwenders selbst bekannt gemacht worden w{\"a}re.
	
	Der Zweck von Single Sign-on ist es, dass sich der Benutzer nur einmal unter Zuhilfenahme eines Authentifizierungsverfahrens (z. B. durch Passworteingabe) authentisieren muss. Bei darauf folgenden Authentifizierungen {\"u}bernimmt nun der SSO-Mechanismus diese Aufgabe, indem die Authentisierung automatisiert abl{\"a}uft.},
	editor = {Wikipedia},
	year = {2021},
	title = {Single Sign-on},
	url = {https://de.wikipedia.org/w/index.php?title=Single_Sign-on&oldid=215677155},
	urldate = {13.01.2022},
	file = {Wikipedia (Hg.) 2021 - Single Sign-on.pdf}
}


@misc{Wikipedia.2021d,
	abstract = {Eine IP-Adresse ist eine Adresse in Computernetzen, die -- wie das Internet -- auf dem Internetprotokoll (IP) basiert. Sie wird Ger{\"a}ten zugewiesen, die an das Netz angebunden sind, macht die Ger{\"a}te so adressierbar und damit erreichbar. Die IP-Adresse kann einen einzelnen Empf{\"a}nger oder eine Gruppe von Empf{\"a}ngern bezeichnen (Multicast, Broadcast). Umgekehrt k{\"o}nnen einem Computer mehrere IP-Adressen zugeordnet sein.
	
	Die IP-Adresse wird vor allem verwendet, um Daten von ihrem Absender zum vorgesehenen Empf{\"a}nger zu transportieren. {\"A}hnlich der Postanschrift auf einem Briefumschlag werden Datenpakete mit einer IP-Adresse versehen, die den Empf{\"a}nger eindeutig identifiziert. Aufgrund dieser Adresse k{\"o}nnen die {\glqq}Poststellen{\grqq}, die Router, entscheiden, in welche Richtung das Paket weitertransportiert werden soll. Im Gegensatz zu Postadressen sind IP-Adressen nicht an einen bestimmten Ort gebunden.
	
	Die bekannteste Notation der heute gel{\"a}ufigen IPv4-Adressen besteht aus vier Zahlen, die Werte von 0 bis 255 annehmen k{\"o}nnen und mit einem Punkt getrennt werden, beispielsweise 192.0.2.42. Technisch gesehen ist die Adresse eine 32-stellige (IPv4) oder 128-stellige (IPv6) Bin{\"a}rzahl.},
	editor = {Wikipedia},
	year = {2021},
	title = {IP-Adresse},
	url = {https://de.wikipedia.org/w/index.php?title=IP-Adresse&oldid=218224804},
	urldate = {17.01.2022},
	file = {4f690ef2-aa72-49dc-95cb-269475512743:C\:\\Users\\Leon Schäfer\\AppData\\Local\\Swiss Academic Software\\Citavi 6\\ProjectCache\\mtxra681in70jxpr858qasvvk4jchlxzb1qmh7hosh7l0wjibxm\\Citavi Attachments\\4f690ef2-aa72-49dc-95cb-269475512743.pdf:pdf}
}


@misc{Wikipedia.2021e,
	abstract = {Ein Port ist der Teil einer Netzwerk-Adresse, der die Zuordnung von TCP- und UDP-Verbindungen und -Datenpaketen zu Server- und Client-Programmen durch Betriebssysteme bewirkt. Zu jeder Verbindung dieser beiden Protokolle geh{\"o}ren zwei Ports, je einer auf Seiten des Clients und des Servers.
	
	G{\"u}ltige Portnummern sind 0 bis 65 535 (= 216 - 1).},
	editor = {Wikipedia},
	year = {2021},
	title = {Port (Protokoll)},
	url = {https://de.wikipedia.org/w/index.php?title=Port_(Protokoll)&oldid=216781784},
	urldate = {17.01.2022},
	file = {c58a66ad-eb25-41f9-be01-a81aa3ca25b1:C\:\\Users\\Leon Schäfer\\AppData\\Local\\Swiss Academic Software\\Citavi 6\\ProjectCache\\mtxra681in70jxpr858qasvvk4jchlxzb1qmh7hosh7l0wjibxm\\Citavi Attachments\\c58a66ad-eb25-41f9-be01-a81aa3ca25b1.pdf:pdf}
}



